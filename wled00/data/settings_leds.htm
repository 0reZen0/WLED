<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
	<meta name="viewport" content="width=500">
	<title>LED Settings</title>
	<script>
    var d=document,laprev=55,maxST=1;
		function H()
		{
			window.open("https://github.com/Aircoookie/WLED/wiki/Settings#led-settings");
		}
		function B()
		{
			window.open("/settings","_self");
		}
		function S(){GetV();setABL();}
    function enABL()
    {
      var en = d.getElementById('able').checked;
      d.Sf.LA.value = (en) ? laprev:0;
      d.getElementById('abl').style.display = (en) ? 'inline':'none';
      d.getElementById('psu2').style.display = (en) ? 'inline':'none';
      if (d.Sf.LA.value > 0) setABL();
    }
    function enLA()
    {
      var val = d.Sf.LAsel.value;
      d.Sf.LA.value = val;
      d.getElementById('LAdis').style.display = (val == 50) ? 'inline':'none';
      UI();
    }
    function setABL()
    {
      d.getElementById('able').checked = true;
      d.Sf.LAsel.value = 50;
      switch (parseInt(d.Sf.LA.value)) {
        case 0: d.getElementById('able').checked = false; enABL(); break;
        case 30: d.Sf.LAsel.value = 30; break;
        case 35: d.Sf.LAsel.value = 35; break;
        case 55: d.Sf.LAsel.value = 55; break;
        case 255: d.Sf.LAsel.value = 255; break;
        default: d.getElementById('LAdis').style.display = 'inline';
      }
      UI();
    }
		function UI()
		{
      var isRGBW = false;
      
      d.getElementById('ampwarning').style.display = (d.Sf.MA.value > 7200) ? 'inline':'none';
	  
	    if (d.Sf.LA.value == 255) laprev = 12;
	    else if (d.Sf.LA.value > 0) laprev = d.Sf.LA.value;
      
      var s = d.getElementsByTagName("select");
      for (i=0; i<s.length; i++) {
        if (s[i].name.substring(0,2)=="LT") {
          n=s[i].name.substring(2);
          var type = s[i].value;
          d.getElementById("p0d"+n).innerHTML = (type > 49) ? "Data pin:" : (type >41) ? "Pins:" : "Pin:";
          d.getElementById("p1d"+n).innerHTML = (type > 49) ? "Clk:" : "";
          var LK = d.getElementsByName("L1"+n)[0];
          //n=(n==""?0:parseInt(n,10));
          for (p=1; p<5; p++) {
            var LK = d.getElementsByName("L"+p+n)[0];
            if (!LK) continue;
            if ((type>49 && p==1) || (type>41 && type < 50 && (p+40 < type))) // TYPE_xxxx values from const.h
            {
              LK.style.display = "inline";
              LK.required = true;
            } else {
              LK.style.display = "none";
              LK.required = false;
              LK.value="";
            }
          }
          if (type == 30 || type == 31 || type == 44 || type == 45) isRGBW = true;
        }
      }

      var myC = d.querySelectorAll('.wc'),
			l = myC.length;
			for (i = 0; i < l; i++) {
				myC[i].style.display = (isRGBW) ? 'inline':'none';
			}

      if (d.activeElement == d.getElementsByName("LC")[0]) {
        var o = d.getElementsByClassName("iST");
        var i = o.length;
        if (i == 1) d.getElementsByName("LC0")[0].value = d.getElementsByName("LC")[0].value;
      }

      var LCs = d.getElementsByTagName("input");
      var sLC = 0;
      for (i=0; i<LCs.length; i++) {
        var nm = LCs[i].name.substring(0,2);
        if (nm=="LC" && LCs[i].name != "LC") {var c = parseInt(LCs[i].value,10); if (c) sLC+=c; continue;}
        if (nm=="L0") {var lc=d.getElementsByName("LC"+LCs[i].name.substring(2))[0]; if(LCs[i].value==3) lc.max=500; else lc.max=1500;}
        if (nm=="L0" || nm=="L1" || nm=="RL" || nm=="BT" || nm=="IR" || nm=="AX")
          if (LCs[i].value!="" && LCs[i].value!="-1") {
            if (d.um_p && d.um_p.some((e)=>e==parseInt(LCs[i].value,10))) {alert("Usermod pin clash!");LCs[i].value="";LCs[i].focus();continue;}
            for (j=0; j<LCs.length; j++)
            {
              if (i==j) continue;
              var n2 = LCs[j].name.substring(0,2);
              if (n2=="L0" || n2=="L1" || n2=="RL" || n2=="BT" || n2=="IR" || n2=="AX")
                if (LCs[j].value!="" && LCs[i].value==LCs[j].value) {alert("Pin clash!");LCs[i].value="";LCs[i].focus();break;}
            }
          }
      }
      d.getElementById('ledwarning').style.display = (sLC > 1000) ? 'inline':'none';

      //var val = Math.ceil((100 + d.Sf.LC.value * laprev)/500)/2;
      var val = Math.ceil((100 + sLC * laprev)/500)/2;
			val = (val > 5) ? Math.ceil(val) : val;
			var s = "";
      var is12V = (d.Sf.LAsel.value == 30);
      var isWS2815 = (d.Sf.LAsel.value == 255);
			if (val < 1.02 && !is12V && !isWS2815)
			{
				s = "ESP 5V pin with 1A USB supply";
			} else
			{
        		s += is12V ? "12V ": isWS2815 ? "WS2815 12V " : "5V ";
				s += val;
				s += "A supply connected to LEDs";
			}
      var val2 = Math.ceil((100 + sLC * laprev)/1500)/2;
      val2 = (val2 > 5) ? Math.ceil(val2) : val2;
      var s2 = "(for most effects, ~";
      s2 += val2;
      s2 += "A is enough)<br>";
			d.getElementById('psu').innerHTML = s;
      d.getElementById('psu2').innerHTML = isWS2815 ? "" : s2;
    }
    function addLEDs(n)
    {
      if (n>1) {maxST=n; d.getElementById("+").style.display="inline"; return;}

      var o = d.getElementsByClassName("iST");
      var i = o.length;

      if ((n==1 && i>=maxST) || (n==-1 && i==0)) return;

      var f = d.getElementById("mLC");
      if (n==1) {
        var cn = `<div class="iST">
          ${i>0?'<hr style="width:260px">':''}
          ${i+1}:
          <select name="LT${i}" onchange="UI()">
            <option value="22">WS281x</option>
            <option value="30">SK6812 RGBW</option>
            <option value="31">TM1814</option>
            <option value="24">400kHz</option>
            <option value="50">WS2801</option>
            <option value="51">APA102</option>
            <option value="52">LPD8806</option>
            <option value="53">P9813</option>
            <option value="41">PWM White</option>
            <option value="42">PWM WWCW</option>
            <option value="43">PWM RGB</option>
            <option value="44">PWM RGBW</option>
            <option value="45">PWM RGBWC</option>
          </select>&nbsp;
          Color Order:
          <select name="CO${i}">
            <option value="0">GRB</option>
            <option value="1">RGB</option>
            <option value="2">BRG</option>
            <option value="3">RBG</option>
            <option value="4">BGR</option>
            <option value="5">GBR</option>
          </select><br>
          <span id="p0d${i}">Pin:</span> <input type="number" name="L0${i}" min="0" max="40" required style="width:35px"/>
          <span id="p1d${i}">Clock:</span> <input type="number" name="L1${i}" min="0" max="40" style="width:35px"/>
          <span id="p2d${i}"></span><input type="number" name="L2${i}" min="0" max="40" style="width:35px"/>
          <span id="p3d${i}"></span><input type="number" name="L3${i}" min="0" max="40" style="width:35px"/>
          <span id="p4d${i}"></span><input type="number" name="L4${i}" min="0" max="40" style="width:35px"/>
          <br>
          Start: <input type="number" name="LS${i}" min="0" max="1500" required oninput="UI()" />&nbsp;
          Count: <input type="number" name="LC${i}" min="0" max="1500" required oninput="UI()" /><br>
          Reverse: <input type="checkbox" name="CV${i}"><br>
        </div>`;
        f.insertAdjacentHTML("beforeend", cn);
      }
      if (n==-1) {
        o[--i].remove();--i;
      }

      d.getElementById("+").style.display = (i<maxST-1) ? "inline":"none";
      d.getElementById("-").style.display = (i>0) ? "inline":"none";

      UI();
    }
		function GetV()
		{
      //values injected by server while sending HTML
    }
	</script>
	<style>
		@import url("style.css");
	</style>
</head>
<body onload="S()">
	<form id="form_s" name="Sf" method="post">
		<div class="helpB"><button type="button" onclick="H()">?</button></div>
		<button type="button" onclick="B()">Back</button><button type="submit">Save</button><hr>
    <h2>LED &amp; Hardware setup</h2>
    Total LED count: <input name="LC" type="number" min="1" max="1500" oninput="UI()" required><br>
    <div id="ledwarning" style="color: orange; display: none;">
      &#9888; You might run into stability or lag issues.<br>
      Use less than 1000 LEDs per ESP for the best experience!<br>
  </div>
  <i>Recommended power supply for brightest white:</i><br>
  <b><span id="psu">?</span></b><br>
  <span id="psu2"><br></span>
  <br>
  Enable automatic brightness limiter: <input type="checkbox" name="ABen" onchange="enABL()" id="able"><br>
  <div id="abl">
    Maximum Current: <input name="MA" type="number" min="250" max="65000" oninput="UI()" required> mA<br>
    <div id="ampwarning" style="color: orange; display: none;">
      &#9888; Your power supply provides high current.<br>
      To improve the safety of your setup,<br>
      please use thick cables,<br>
      multiple power injection points and a fuse!<br>
    </div>
    <i>Automatically limits brightness to stay close to the limit.<br>
    Keep at &lt;1A if powering LEDs directly from the ESP 5V pin!<br>
    If you are using an external power supply, enter its rating.<br>
    (Current estimated usage: <span class="pow">unknown</span>)</i><br><br>
    LED voltage (Max. current for a single LED):<br>
    <select name="LAsel" onchange="enLA()">
      <option value="55" selected>5V default (55mA)</option>
      <option value="35">5V efficient (35mA)</option>
      <option value="30">12V (30mA)</option>
      <option value="255">WS2815 (12mA)</option>
      <option value="50">Custom</option>
    </select><br>
    <span id="LAdis" style="display: none;">Custom max. current per LED: <input name="LA" type="number" min="0" max="255" id="la" oninput="UI()" required> mA<br></span>
    <i>Keep at default if you are unsure about your type of LEDs.</i><br>
  </div>
    <h3>Hardware setup</h3>
    <div id="mLC">LED outputs:</div>
    <button type="button" id="+" onclick="addLEDs(1)" style="display:none;border-radius:20px;height:36px;">+</button>
    <button type="button" id="-" onclick="addLEDs(-1)" style="display:none;border-radius:20px;width:36px;height:36px;">-</button><br><br>
    Relay pin: <input type="number" min="-1" max="40" name="RL" onchange="UI()"> Active high <input type="checkbox" name="RM"><br>
    Button pin: <input type="number" min="-1" max="40" name="BT" onchange="UI()"><br>
    IR pin: <input type="number" min="-1" max="40" name="IR" onchange="UI()"><br>
    AUX pin: <input type="number" min="-1" max="40" name="AX" onchange="UI()">
		<h3>Defaults</h3>
		Turn LEDs on after power up/reset: <input type="checkbox" name="BO"><br>
    Default brightness: <input name="CA" type="number" min="0" max="255" required> (0-255)<br><br>
    Apply preset <input name="BP" type="number" min="0" max="250" required> at boot (0 uses defaults)
    <br>- <i>or</i> -<br>
    Set current preset cycle setting as boot default: <input type="checkbox" name="PC"><br><br>
		Use Gamma correction for color: <input type="checkbox" name="GC"> (strongly recommended)<br>
		Use Gamma correction for brightness: <input type="checkbox" name="GB"> (not recommended)<br><br>
		Brightness factor: <input name="BF" type="number" min="1" max="255" required> %
		<h3>Transitions</h3>
		Crossfade: <input type="checkbox" name="TF"><br>
		Transition Time: <input name="TD" maxlength="5" size="2"> ms<br>
		Enable Palette transitions: <input type="checkbox" name="PF">
		<h3>Timed light</h3>
		Default Duration: <input name="TL" type="number" min="1" max="255" required> min<br>
		Default Target brightness: <input name="TB" type="number" min="0" max="255" required><br>
		Mode:
    <select name="TW">
			<option value="0">Wait and set</option>
			<option value="1">Fade</option>
			<option value="2">Fade Color</option>
			<option value="3">Sunrise</option>
		</select>
    <h3>Advanced</h3>
		Palette blending:
		<select name="PB">
			<option value="0">Linear (wrap if moving)</option>
			<option value="1">Linear (always wrap)</option>
			<option value="2">Linear (never wrap)</option>
			<option value="3">None (not recommended)</option>
		</select><br>
		Reverse LED order (rotate 180): <input type="checkbox" name="RV"><br>
    Skip first LED: <input type="checkbox" name="SL"><br>
    <span class="wc">
      Auto-calculate white channel from RGB:<br>
      <select name="AW">
        <option value=0>None</option>
        <option value=1>Brighter</option>
        <option value=2>Accurate</option>
        <option value=3>Dual</option>
        <option value=4>Legacy</option>
      </select>
    <br></span><hr>
		<button type="button" onclick="B()">Back</button><button type="submit">Save</button>
	</form>
</body>
</html>
